import streamlit as st
import numpy as np
import pandas as pd
import io
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import re
import math
from reportlab.lib.pagesizes import A4


st.set_page_config(page_title="Uncertainty Tool", layout="wide")

# ------------------------
# Diller / language dictionary (g√ºncellenmi≈ü)
# ------------------------
languages = {
    "T√ºrk√ße": {
        "manual_header": "Elle Veri Giri≈üi Modu",
        "manual_subheader": "{} ƒ∞√ßin √ñl√ß√ºm Sonucu Girin",
        "extra_uncert_label": "Ek Belirsizlik Kaynaƒüƒ±",
        "extra_uncert_count": "Ek Belirsizlik Kaynaƒüƒ± Sayƒ±sƒ±",
        "extra_uncert_type": "{} i√ßin t√ºr se√ßin",
        "absolute": "Mutlak",
        "percent": "Y√ºzde",
        "calculate_button": "Sonu√ßlarƒ± Hesapla",
        "overall_results": "Genel Sonu√ßlar",
        "average_value": "Ortalama Deƒüer",
        "repeatability_within": "G√ºn ƒ∞√ßi Tekrarlanabilirlik",
        "repeatability_between": "G√ºnler Arasƒ± Tekrarlanabilirlik",
        "combined_relative_unc": "Birle≈üik G√∂receli Belirsizlik",
        "expanded_uncertainty": "Geni≈ületilmi≈ü Belirsizlik (k=2)",
        "relative_expanded_uncertainty_col": "G√∂receli Geni≈ületilmi≈ü Belirsizlik (%)",
        "paste_title": "Belirsizlik Hesaplama Uygulamasƒ±",
        "paste_subtitle": "B. Yal√ßƒ±nkaya tarafƒ±ndan geli≈ütirildi",
        "paste_area": "Verileri g√ºnl√ºk s√ºtunlar halinde buraya yapƒ±≈ütƒ±rƒ±n (bo≈ü h√ºcreler dƒ±≈ülanƒ±r)",
        "results": "Sonu√ßlar",
        "daily_measurements": "G√ºnl√ºk √ñl√ß√ºm Sonu√ßlarƒ±",
        "add_uncertainty": "Ek Belirsizlik Kaynaƒüƒ± Ekle",
        "download_pdf": "PDF ƒ∞ndir",
        "input_data_table": "Girilen Veriler Tablosu",
        "method_choice": "Metot Se√ßimi",
        "top_down": "Top-Down (ƒ∞statistiksel)",
        "bottom_up": "Bottom-Up (Bile≈üen Tabanlƒ±)",

        # --- Bottom-Up metinleri ---
        "bottomup_header": "Bottom-Up Modu",
        "bottomup_desc": "Bile≈üenleri ve belirsizlik t√ºrlerini girerek birle≈üik belirsizliƒüi hesaplayabilirsiniz.",
        "bottomup_add": "Bile≈üen Sayƒ±sƒ±",
        "bottomup_calc": "Hesapla",
        "bottomup_uc": "Birle≈üik G√∂receli Belirsizlik",
        "bottomup_U": "Geni≈ületilmi≈ü Belirsizlik (U)",
        "bottomup_ref_value": "Referans Deƒüeri (nominal √∂l√ß√ºm deƒüeri)",
        "load_default": "üìä √ñrnek Verileri Y√ºkle",
        "reset": "üßπ Sƒ±fƒ±rla",

        "anova_table_label": "ANOVA Tablosu",
        "validation_header": "Validation / Doƒürulama Modu",
        "validation_desc": "Girdi verileri beklenen deƒüerlerle kar≈üƒ±la≈ütƒ±rƒ±larak deƒüerlendirilir.",
        "daily_measurements": "G√ºnl√ºk √ñl√ß√ºm Sonu√ßlarƒ±",
        "measurement_number": "√ñl√ß√ºm No",
        "value": "Deƒüer",
        "day": "G√ºn",
        "legend": "Seriler",
        "citation_note": """
Bu ara√ß a≈üaƒüƒ±daki ≈üekilde kaynak g√∂sterilebilir:
Yal√ßƒ±nkaya, B. (2025). *UncertCalc: Laboratuvar √ñl√ß√ºmleri i√ßin Belirsizlik Hesaplama Aracƒ±*.
(S√ºr√ºm 1.0) [https://uncertcalc.streamlit.app/].
"""

    },

    "English": {
        "manual_header": "Manual Input Mode",
        "manual_subheader": "Enter Measurements for {}",
        "extra_uncert_label": "Extra Uncertainty Sources",
        "extra_uncert_count": "Number of Extra Sources",
        "extra_uncert_type": "Select type for {}",
        "absolute": "Absolute",
        "percent": "Percent",
        "calculate_button": "Calculate Results",
        "overall_results": "Overall Results",
        "average_value": "Average Value",
        "repeatability_within": "Repeatability Within Days",
        "repeatability_between": "Repeatability Between Days",
        "combined_relative_unc": "Combined Relative Uncertainty",
        "expanded_uncertainty": "Expanded Uncertainty (k=2)",
        "relative_expanded_uncertainty_col": "Relative Expanded Uncertainty (%)",
        "paste_title": "Uncertainty Calculation Application",
        "paste_subtitle": "Developed by B. Yal√ßƒ±nkaya",
        "paste_area": "Paste data here (columns = days)",
        "results": "Results",
        "daily_measurements": "Daily Measurement Results",
        "add_uncertainty": "Add Extra Uncertainty Sources",
        "download_pdf": "Download PDF",
        "input_data_table": "Input Data Table",
        "method_choice": "Select Method",
        "top_down": "Top-Down (Statistical)",
        "bottom_up": "Bottom-Up (Component-Based)",

        # --- Bottom-Up section ---
        "bottomup_header": "Bottom-Up Mode",
        "bottomup_desc": "Enter components and their uncertainty types to calculate combined uncertainty.",
        "bottomup_add": "Number of Components",
        "bottomup_calc": "Calculate",
        "bottomup_uc": "Combined Relative Uncertainty",
        "bottomup_U": "Expanded Uncertainty (U)",
        "bottomup_ref_value": "Reference Value (nominal measurement value)",
        "load_default": "üìä Load Default Data",
        "reset": "üßπ Reset",

        "anova_table_label": "ANOVA Table",
        "validation_header": "Validation Mode",
        "validation_desc": "Compare measured results against expected parameter values.",
        "daily_measurements": "Daily Measurement Results",
        "measurement_number": "Measurement #",
        "value": "Value",
        "day": "Day",
        "legend": "Series",
        "citation_note": """
This tool may be cited in academic or technical publications as:
Yal√ßƒ±nkaya, B. (2025). *UncertCalc: An Uncertainty Calculation Tool for Laboratory Measurements*.
(Version 1.0) [https://uncertcalc.streamlit.app/].
"""

    }
}

# ------------------------
# Hesaplama Fonksiyonlarƒ± (Top-Down)
# ------------------------
def calculate_results(measurements, extras, lang_texts):
    valid_groups = [g for g in measurements if len(g) > 0]
    if len(valid_groups) < 2:
        # raise or return empty results - caller uses Streamlit UI, so return empty
        return [], valid_groups, pd.DataFrame({
            "Varyans Kaynaƒüƒ±": [],
            "SS": [],
            "df": [],
            "MS": []
        })
    means = [np.mean(g) for g in valid_groups]
    ns = [len(g) for g in valid_groups]
    N = sum(ns)
    k = len(valid_groups)
    grand_mean = np.average(means, weights=ns)
    ss_within = sum(sum((x - np.mean(g))**2 for x in g) for g in valid_groups)
    ss_between = sum(ns[i] * (means[i] - grand_mean)**2 for i in range(k))
    df_within = N - k
    df_between = k - 1
    ms_within = ss_within / df_within if df_within > 0 else 0.0
    ms_between = ss_between / df_between if df_between > 0 else 0.0
    anova_df = pd.DataFrame({
        "Varyans Kaynaƒüƒ±": ["Gruplar Arasƒ±nda", "Gruplar ƒ∞√ßinde", "Toplam"],
        "SS": [ss_between, ss_within, ss_between + ss_within],
        "df": [df_between, df_within, df_between + df_within],
        "MS": [ms_between, ms_within, np.nan]
    })
    repeatability = math.sqrt(ms_within) if ms_within >= 0 else 0.0
    n_per_group = int(round(np.mean(ns))) if int(round(np.mean(ns))) > 0 else 1
    inter_precision = math.sqrt(max(ms_between - ms_within, 0.0) / n_per_group) if ms_between > ms_within else 0.0
    rel_r = repeatability / grand_mean if grand_mean != 0 else 0.0
    rel_ip = inter_precision / grand_mean if grand_mean != 0 else 0.0
    rel_extra = math.sqrt(sum([r[2]**2 for r in extras])) if extras else 0.0
    u_c = math.sqrt(rel_r**2 + rel_ip**2 + rel_extra**2)
    U = 2 * u_c * grand_mean
    U_rel = (U / grand_mean) * 100 if grand_mean != 0 else 0.0
    results_list = [
        ("Repeatability", f"{repeatability:.6f}", r"s_r = \sqrt{MS_{within}}"),
        ("Intermediate Precision", f"{inter_precision:.6f}", r"s_{IP} = \sqrt{\frac{MS_{between} - MS_{within}}{n}}"),
        ("Relative Repeatability", f"{rel_r:.6f}", r"u_{r,rel} = \frac{s_r}{\bar{x}}"),
        ("Relative Intermediate Precision", f"{rel_ip:.6f}", r"u_{IP,rel} = \frac{s_{IP}}{\bar{x}}"),
        ("Relative Extra Uncertainty sources", f"{rel_extra:.6f}", r"u_{extra,rel} = \sqrt{\sum u_{extra,i}^2}"),
        ("Combined Relative Uncertainty", f"{u_c:.6f}", r"u_c = \sqrt{u_{r,rel}^2 + u_{IP,rel}^2 + u_{extra,rel}^2}"),
        (lang_texts["average_value"], f"{grand_mean:.6f}", r"\bar{x} = \frac{\sum x_i}{n}"),
        (lang_texts["expanded_uncertainty"], f"{U:.6f}", r"U = 2 \cdot u_c \cdot \bar{x}"),
        (lang_texts["relative_expanded_uncertainty_col"], f"{U_rel:.6f}", r"U_{rel} = \frac{U}{\bar{x}} \cdot 100")
    ]
    return results_list, valid_groups, anova_df

# ------------------------
# PDF Fonksiyonu
# ------------------------
import io
import pandas as pd
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# T√ºrk√ße uyumlu font kaydƒ±
pdfmetrics.registerFont(TTFont("DejaVuSans", "DejaVuSans.ttf"))

def create_pdf(results_list, anova_df, lang_texts, title="Uncertainty Results"):
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    c.setFont("DejaVuSans", 12)
    y = height - 50

    # Ba≈ülƒ±k
    c.drawString(50, y, title)
    y -= 30

    # Sonu√ß listesi
    for param, value, formula in results_list:
        c.drawString(50, y, f"{param}: {value}")
        y -= 18
        if y < 80:
            c.showPage()
            c.setFont("DejaVuSans", 12)
            y = height - 50

    # ANOVA tablosu
    y -= 10
    c.drawString(50, y, lang_texts.get("anova_table_label", "ANOVA Tablosu"))
    y -= 20
    for idx, row in anova_df.iterrows():
        ms_val = row['MS'] if 'MS' in row and not pd.isna(row['MS']) else None
        txt = f"{row['Varyans Kaynaƒüƒ±']}: SS={row['SS']:.6f}, df={int(row['df'])}"
        if ms_val is not None:
            txt += f", MS={row['MS']:.6f}"
        c.drawString(50, y, txt)
        y -= 14
        if y < 60:
            c.showPage()
            c.setFont("DejaVuSans", 12)
            y = height - 50

    # Cite edilebilir footer
    citation_text = lang_texts.get("citation_note", "").strip()
    if citation_text:
        textobject = c.beginText()
        textobject.setTextOrigin(50, 30)  # Alt kenardan 30 pt yukarƒ±
        textobject.setFont("DejaVuSans", 10)  # Footer font boyutu
        for line in citation_text.split("\n"):
            textobject.textLine(line)
            c.drawText(textobject)

    
    c.save()
    buffer.seek(0)
    return buffer


# ------------------------
# Grafik Fonksiyonu
# ------------------------
def plot_daily_measurements(measurements, col_names, lang_texts):
    if not measurements:
        return
    fig, ax = plt.subplots()

    for i, group in enumerate(measurements):
        if len(group) == 0:
            continue
        label = col_names[i] if i < len(col_names) else f"{lang_texts.get('day', 'Day')} {i+1}"
        ax.plot(range(1, len(group)+1), group, marker='o', linestyle='-', label=label)

    # X eksenini sadece tam sayƒ±larla sƒ±nƒ±rlama
    ax.set_xticks(range(1, max(len(group) for group in measurements if len(group) > 0) + 1))

    # √áoklu dil destekli eksen ve ba≈ülƒ±k metinleri
    ax.set_xlabel(lang_texts.get("measurement_number", "Measurement #"))
    ax.set_ylabel(lang_texts.get("value", "Value"))
    ax.set_title(lang_texts.get("daily_measurements", "Daily Measurements"))

    # Legend ba≈ülƒ±ƒüƒ± dil se√ßimine g√∂re deƒüi≈üecek ≈üekilde
    legend_title = lang_texts.get("legend", None)
    legend = ax.legend(title=legend_title if legend_title else None)

    # Eƒüer legend ba≈ülƒ±ƒüƒ± varsa font boyutunu ayarla
    if legend and legend_title:
        plt.setp(legend.get_title(), fontsize='10', fontweight='bold')

    st.pyplot(fig)
    
# ------------------------
# Sayfa altƒ±na cite notu ekleme
# ------------------------
def show_citation(lang_texts):
    citation_text = lang_texts.get("citation_note", "").strip()
    if citation_text:
        st.markdown("---")  # ayƒ±rƒ±cƒ± √ßizgi
        # √áok satƒ±rlƒ± metin i√ßin <br> kullanƒ±yoruz
        citation_html = citation_text.replace("\n", "<br>")
        st.markdown(
            f"<p style='font-size:10px; color:gray; text-align:center'>{citation_html}</p>",
            unsafe_allow_html=True
        )

# ------------------------
# Sonu√ß G√∂sterim Fonksiyonu
# ------------------------
def display_results_with_formulas(results_list, title, lang_texts):
    st.write(f"## {title}")
    highlight_map = {
        lang_texts["average_value"]: "color: #007BFF; font-weight: bold;",
        lang_texts["expanded_uncertainty"]: "color: #007BFF; font-weight: bold;",
        lang_texts["relative_expanded_uncertainty_col"]: "color: #007BFF; font-weight: bold;"
    }
    table_html = """
    <style>
    table {width: 85%; border-collapse: collapse; margin-top: 10px; margin-bottom: 15px;}
    th, td {border: 1px solid #ddd; padding: 8px 12px; text-align: left;}
    th {background-color: #f5f5f5; font-weight: bold;}
    tr:hover {background-color: #f9f9f9;}
    </style>
    <table>
        <tr><th>Parametre</th><th>Deƒüer</th></tr>
    """
    for param, value, formula in results_list:
        style = highlight_map.get(param, "")
        table_html += f"<tr><td style='{style}'>{param}</td><td style='{style}'>{value}</td></tr>"
    table_html += "</table>"
    st.markdown(table_html, unsafe_allow_html=True)
    st.write("### Form√ºller")
    for param, _, formula in results_list:
        try:
            st.latex(formula)
        except Exception:
            st.write(formula)

# ------------------------
# Manual Mod
# ------------------------
def run_manual_mode(lang_texts):
    st.header(lang_texts["manual_header"])
    days = ['1. G√ºn', '2. G√ºn', '3. G√ºn']
    measurements = []
    for day in days:
        st.subheader(lang_texts["manual_subheader"].format(day))
        values = []
        for i in range(5):
            val = st.number_input(f"{day} - Tekrar {i+1}", value=0.0, step=0.01, format="%.2f", key=f"{day}_{i}")
            values.append(val)
        values = [v for v in values if v != 0.0]
        measurements.append(values)
    # dataframe g√∂sterimi
    max_len = max((len(g) for g in measurements), default=0)
    df_manual = pd.DataFrame([g + [np.nan] * (max_len - len(g)) for g in measurements]).T
    df_manual.columns = days
    st.subheader(lang_texts["input_data_table"])
    st.dataframe(df_manual)
    overall_avg = np.mean([v for g in measurements for v in g if v != 0]) if any(len(g) for g in measurements) else 1.0
    num_extra = st.number_input(lang_texts["extra_uncert_count"], min_value=0, max_value=10, value=0, step=1, key="manual_num_extra")
    extras = []
    st.subheader(lang_texts["add_uncertainty"])
    for i in range(num_extra):
        label = st.text_input(f"Ekstra Belirsizlik {i+1} Adƒ±", key=f"manual_label_{i}")
        if label:
            type_ = st.radio(lang_texts["extra_uncert_type"].format(label),
                             [lang_texts["absolute"], lang_texts["percent"]],
                             key=f"manual_type_{i}")
            if type_ == lang_texts["absolute"]:
                value = st.number_input(f"{label} Deƒüeri", min_value=0.0, value=0.0, step=0.01, key=f"manual_val_{i}")
                rel_val = value / overall_avg if overall_avg != 0 else 0
            else:
                perc = st.number_input(f"{label} (%)", min_value=0.0, value=0.0, step=0.01, key=f"manual_percent_{i}")
                rel_val = perc / 100.0
                value = rel_val * overall_avg
            extras.append((label, value, rel_val))
    if st.button(lang_texts["calculate_button"], key="manual_calc_btn"):
        results_list, valid_groups, anova_df = calculate_results(measurements, extras, lang_texts)
        if not results_list:
            st.error("En az iki dolu s√ºtun (g√ºn) gerekli.")
            return
        display_results_with_formulas(results_list, title=lang_texts["overall_results"], lang_texts=lang_texts)
        st.subheader(lang_texts["anova_table_label"])
        st.dataframe(anova_df.style.format({"SS": "{:.9f}", "MS": "{:.9f}", "df": "{:.0f}"}))
        plot_daily_measurements(valid_groups, df_manual.columns.tolist(), lang_texts)
        pdf_buffer = create_pdf(results_list, anova_df, lang_texts, title="Manual Mode Results")
        st.download_button(label=lang_texts["download_pdf"], data=pdf_buffer, file_name="uncertainty_results_manual.pdf", mime="application/pdf")
        # ‚úÖ Altta citation notunu g√∂ster
        show_citation(lang_texts)

# ------------------------
# Paste Mod (Top-Down paste)
# ------------------------
def run_paste_mode(lang_texts):
    st.title(lang_texts["paste_title"])
    st.caption(lang_texts["paste_subtitle"])
    pasted_data = st.text_area(lang_texts["paste_area"], height=200)
    if not pasted_data:
        st.info("Veri yapƒ±≈ütƒ±rƒ±ldƒ±ktan sonra hesaplama butonuna basƒ±n.")
        return
    try:
        pasted_data = pasted_data.replace(',', '.')
        lines = [ln.rstrip() for ln in pasted_data.strip().splitlines() if ln.strip() != ""]
        use_tab = any('\t' in ln for ln in lines)
        use_multi_space = any(re.search(r'\s{2,}', ln) for ln in lines)
        rows = []
        for line in lines:
            if use_tab:
                parts = line.split('\t')
            elif use_multi_space:
                parts = re.split(r'\s{2,}', line)
            else:
                parts = line.split()
            parts = [p.strip() for p in parts]
            rows.append(parts)
        max_cols = max(len(r) for r in rows)
        for r in rows:
            if len(r) < max_cols:
                r += [''] * (max_cols - len(r))
        df = pd.DataFrame(rows)
        df = df.replace('', np.nan)
        for col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        df.columns = [f"{i+1}. G√ºn" for i in range(df.shape[1])]
    except Exception as e:
        st.error(f"Hata! L√ºtfen verileri doƒüru formatta yapƒ±≈ütƒ±rƒ±n. ({str(e)})")
        return
    st.subheader(lang_texts["input_data_table"])
    st.dataframe(df)
    measurements = [df[col].dropna().tolist() for col in df.columns]
    overall_avg = np.mean([v for g in measurements for v in g if not np.isnan(v)]) if measurements else 1.0
    num_extra = st.number_input(lang_texts["extra_uncert_count"], min_value=0, max_value=10, value=0, step=1, key="paste_num_extra")
    extras = []
    st.subheader(lang_texts["add_uncertainty"])
    for i in range(num_extra):
        label = st.text_input(f"Ekstra Belirsizlik {i+1} Adƒ±", key=f"paste_label_{i}")
        if label:
            type_ = st.radio(lang_texts["extra_uncert_type"].format(label), [lang_texts["absolute"], lang_texts["percent"]], key=f"paste_type_{i}")
            if type_ == lang_texts["absolute"]:
                value = st.number_input(f"{label} Deƒüeri", min_value=0.0, value=0.0, step=0.01, key=f"paste_val_{i}")
                rel_val = value / overall_avg if overall_avg != 0 else 0
            else:
                perc = st.number_input(f"{label} (%)", min_value=0.0, value=0.0, step=0.01, key=f"paste_percent_{i}")
                rel_val = perc / 100.0
                value = rel_val * overall_avg
            extras.append((label, value, rel_val))
    if st.button(lang_texts["calculate_button"], key="paste_calc_btn"):
        results_list, valid_groups, anova_df = calculate_results(measurements, extras, lang_texts)
        if not results_list:
            st.error("En az iki dolu s√ºtun (g√ºn) gerekli.")
            return
        display_results_with_formulas(results_list, title=lang_texts["results"], lang_texts=lang_texts)
        st.subheader(lang_texts["anova_table_label"])
        st.dataframe(anova_df.style.format({"SS": "{:.9f}", "MS": "{:.9f}", "df": "{:.0f}"}))
        plot_daily_measurements(valid_groups, df.columns.tolist(), lang_texts)
        pdf_buffer = create_pdf(results_list, anova_df, lang_texts, title="Paste Mode Results")
        st.download_button(label=lang_texts["download_pdf"], data=pdf_buffer, file_name="uncertainty_results.pdf", mime="application/pdf")
        # ‚úÖ Altta citation notunu g√∂ster
        show_citation(lang_texts)
# ------------------------
# Validation Mod
# ------------------------
def run_validation_mode(lang_texts):
    st.header(lang_texts.get("validation_header", "Validation"))
    st.write(lang_texts.get("validation_desc", ""))

    if "df" not in st.session_state:
        st.session_state["df"] = None

    # √∂rnek veri butonu
    if st.button(lang_texts.get("load_default", "üìä √ñrnek Verileri Y√ºkle"), key="val_load_default"):
        st.session_state["df"] = pd.DataFrame({
            "1. G√ºn": [34644.38, 35909.45, 33255.74, 33498.69, 33632.45],
            "2. G√ºn": [34324.02, 37027.40, 31319.64, 34590.12, 34521.42],
            "3. G√ºn": [35447.87, 35285.81, 34387.56, 35724.35, 36236.50]
        })
        st.rerun()

    pasted_data = st.text_area("Veri giri≈ü alanƒ± (Excel'den kopyala-yapƒ±≈ütƒ±r)", height=200, placeholder="√ñrnek: 1,85\t1,99\t1,94\n1,99\t1,88\t1,91\n...")
    if pasted_data.strip():
        try:
            tmp = pasted_data.replace(',', '.')
            lines = [ln.rstrip() for ln in tmp.strip().splitlines() if ln.strip() != ""]
            use_tab = any('\t' in ln for ln in lines)
            use_multi_space = any(re.search(r'\s{2,}', ln) for ln in lines)
            rows = []
            for line in lines:
                if use_tab:
                    parts = line.split('\t')
                elif use_multi_space:
                    parts = re.split(r'\s{2,}', line)
                else:
                    parts = line.split()
                parts = [p.strip() for p in parts]
                rows.append(parts)
            max_cols = max(len(r) for r in rows)
            for r in rows:
                if len(r) < max_cols:
                    r += [''] * (max_cols - len(r))
            df = pd.DataFrame(rows)
            df = df.replace('', np.nan)
            for col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            df.columns = [f"{i+1}. G√ºn" for i in range(df.shape[1])]
            st.session_state["df"] = df
            st.success("Yapƒ±≈ütƒ±rƒ±lan veriler i≈ülendi.")
            st.rerun()
        except Exception as e:
            st.error(f"Hata: {e}")

    if st.session_state.get("df") is None:
        st.info("L√ºtfen verileri yapƒ±≈ütƒ±rƒ±n veya √∂rnek verileri y√ºkleyin.")
        return

    df = st.session_state["df"]
    st.subheader(lang_texts.get("input_data_table", "Input Data Table"))
    st.dataframe(df)

    parameters = [
        "Repeatability", "Intermediate Precision", "Relative Repeatability",
        "Relative Intermediate Precision", "Relative Extra Uncertainty",
        "Combined Relative Uncertainty", "Ortalama Deƒüer",
        "Geni≈ületilmi≈ü Belirsizlik (k=2)",
        "G√∂receli Geni≈ületilmi≈ü Belirsizlik (%)"
    ]
    st.subheader("Beklenen Deƒüerler (Parametre Bazlƒ±)")
    expected_values = {}
    for p in parameters:
        expected_values[p] = st.number_input(f"{p}", min_value=0.0, value=0.0, step=0.00001, format="%.6f", key=f"val_expected_{p}")

    tolerance = st.slider("Tolerans (%)", 1, 50, 5, step=1, key="val_tolerance")

    if st.button(lang_texts.get("calculate_button", "Sonu√ßlarƒ± Hesapla"), key="val_calc_btn"):
        measurements = [df[col].dropna().tolist() for col in df.columns]
        if not measurements or df.empty:
            st.error("Veri bulunamadƒ±.")
            return
        results_list, valid_groups, anova_df = calculate_results(measurements, [], lang_texts)
        if not results_list:
            st.error("En az iki dolu s√ºtun (g√ºn) gerekli.")
            return
        df_results = pd.DataFrame({
            "Parametre": [r[0] for r in results_list],
            "Deƒüer": [float(r[1]) if isinstance(r[1], str) and r[1].replace('.','',1).isdigit() else r[1] for r in results_list]
        })
        df_results["Beklenen Deƒüer"] = df_results["Parametre"].apply(lambda p: expected_values.get(p, 0.0))
        def pass_fail(row):
            try:
                val = float(row["Deƒüer"])
                exp = float(row["Beklenen Deƒüer"])
            except Exception:
                return "‚ùå Kaldƒ±"
            if exp == 0:
                return "‚úÖ Ge√ßti" if val == 0 else "‚ùå Kaldƒ±"
            return "‚úÖ Ge√ßti" if abs((val - exp) / exp * 100) <= tolerance else "‚ùå Kaldƒ±"
        df_results["Sonu√ß"] = df_results.apply(pass_fail, axis=1)
        st.subheader("Sonu√ßlar (Beklenen Deƒüer Kar≈üƒ±la≈ütƒ±rmalƒ±)")
        st.dataframe(df_results.style.format({"Deƒüer": "{:.6f}", "Beklenen Deƒüer": "{:.6f}"}))
        st.subheader(lang_texts.get("anova_table_label", "ANOVA Table"))
        st.dataframe(anova_df.style.format({"SS": "{:.9f}", "MS": "{:.9f}", "df": "{:.0f}"}))
        plot_daily_measurements(valid_groups, df.columns.tolist(), lang_texts)
        show_citation(lang_texts)

# ------------------------
# Bottom-Up Mod (g√ºncel)
# ------------------------
def run_bottom_up_mode(lang_texts):
    st.header(lang_texts.get("bottomup_header", "Bottom-Up Mode"))
    st.write(lang_texts.get("bottomup_desc", ""))

    # session keys
    if "bu_use_default" not in st.session_state:
        st.session_state["bu_use_default"] = False
    if "bu_default_components" not in st.session_state:
        st.session_state["bu_default_components"] = None

    # butonlar (dil destekli)
    if st.button(lang_texts.get("load_default", "üìä √ñrnek Verileri Y√ºkle"), key="bu_load_btn"):
        st.session_state["bu_use_default"] = True
        st.session_state["bu_default_components"] = [
            {"name": "Terazi", "value": 100.0, "u_type": lang_texts.get("absolute", "Mutlak"), "u_val": 0.5},
            {"name": "Pipet", "value": 100.0, "u_type": lang_texts.get("percent", "Y√ºzde"), "u_val": 1.0},
            {"name": "Cihaz", "value": 100.0, "u_type": lang_texts.get("absolute", "Mutlak"), "u_val": 0.2},
        ]
        st.rerun()

    if st.button(lang_texts.get("reset", "üßπ Sƒ±fƒ±rla"), key="bu_reset_btn"):
        st.session_state["bu_use_default"] = False
        st.session_state["bu_default_components"] = None
        # temizle: bile≈üenlerle ilgili b√ºt√ºn inputlarƒ±n varsayƒ±lanlarƒ±nƒ± temizlemek zor olabilir; rerun yeterli
        st.rerun()

    num_comp = st.number_input(lang_texts.get("bottomup_add", "Number of Components"), min_value=1, max_value=20, value=3, step=1, key="bu_num_comp")
    components = []
    st.subheader("Bile≈üen Girdileri")
    default_data = st.session_state.get("bu_default_components") or []

    for i in range(int(num_comp)):
        if st.session_state.get("bu_use_default") and i < len(default_data):
            d = default_data[i]
            name_default, value_default, type_default, unc_default = d["name"], d["value"], d["u_type"], d["u_val"]
        else:
            name_default, value_default, type_default, unc_default = f"Bile≈üen {i+1}", 0.0, lang_texts.get("absolute", "Mutlak"), 0.0

        st.markdown(f"**Bile≈üen {i+1}**")
        name = st.text_input(f"Bile≈üen {i+1} Adƒ±", value=name_default, key=f"bu_name_{i}")
        value = st.number_input(f"{name} Deƒüeri", min_value=0.0, value=value_default, step=0.01, key=f"bu_val_{i}")
        u_type = st.radio(f"{name} Belirsizlik Tipi", [lang_texts.get("absolute", "Mutlak"), lang_texts.get("percent", "Y√ºzde")],
                          index=0 if type_default == lang_texts.get("absolute", "Mutlak") else 1, key=f"bu_type_{i}")
        u_val = st.number_input(f"{name} Belirsizlik", min_value=0.0, value=unc_default, step=0.01, key=f"bu_unc_{i}")
        components.append({"name": name, "value": value, "u_type": u_type, "u_val": u_val})

    # referans deƒüer
    st.subheader(lang_texts.get("bottomup_ref_value", "Reference Value"))
    reference_value = st.number_input(lang_texts.get("bottomup_ref_value", "Reference Value"), min_value=0.0, value=100.0, step=0.01, key="bu_ref_value")

    # k deƒüeri
    st.subheader("Geni≈ületilmi≈ü Belirsizlik Katsayƒ±sƒ± (k)")
    k = st.number_input("k deƒüerini giriniz", min_value=1.0, max_value=10.0, value=2.0, step=0.01, key="k_manual_bu")

    if len(components) > 0:
        u_squares = []
        for comp in components:
            if comp["u_type"] == lang_texts.get("absolute", "Mutlak"):
                u_rel = comp["u_val"] / comp["value"] if comp["value"] != 0 else 0.0
            else:
                u_rel = comp["u_val"] / 100.0
            u_squares.append(u_rel**2)
            comp["u_rel"] = u_rel

        u_c_rel = math.sqrt(sum(u_squares)) if u_squares else 0.0
        u_c = u_c_rel * reference_value
        U = k * u_c

        # Tablo g√∂sterimi
        st.subheader("Bile≈üenler ve G√∂receli Belirsizlikleri")
        comp_df = pd.DataFrame(components)
        comp_df_display = comp_df[["name", "value", "u_type", "u_val", "u_rel"]].rename(columns={
            "name": "Bile≈üen",
            "value": "Deƒüer",
            "u_type": "Belirsizlik T√ºr√º",
            "u_val": "Belirsizlik",
            "u_rel": "G√∂receli Belirsizlik"
        })
        st.dataframe(comp_df_display.style.format({
            "Deƒüer": "{:.4f}",
            "Belirsizlik": "{:.4f}",
            "G√∂receli Belirsizlik": "{:.6f}"
        }))

        # sonu√ßlar
        st.subheader("Birle≈üik ve Geni≈ületilmi≈ü Belirsizlik")
        col1, col2 = st.columns(2)
        col1.metric("Birle≈üik G√∂receli Belirsizlik (u_c,rel)", f"{u_c_rel:.6f}")
        col2.metric(f"Geni≈ületilmi≈ü Belirsizlik (U) [k={k}]", f"{U:.6f}")

        # form√ºller
        st.markdown("### Form√ºller")
        st.latex(r"u_{c,rel} = \sqrt{\sum_{i=1}^{n} u_{i,rel}^2}")
        st.latex(r"u_c = u_{c,rel} \cdot x_{ref}")
        st.latex(fr"U = k \cdot u_c \quad (k = {k})")

        # grafik (bile≈üen katkƒ±larƒ±)
        st.subheader("Bile≈üenlerin G√∂receli Belirsizlik Katkƒ±sƒ±")
        fig, ax = plt.subplots()
        names = [c["name"] for c in components]
        rel_vals = [c["u_rel"] for c in components]
        ax.barh(names, rel_vals)
        ax.set_xlabel("G√∂receli Belirsizlik")
        ax.set_ylabel("Bile≈üen")
        ax.set_title("Bile≈üen Katkƒ±larƒ±")
        st.pyplot(fig)
        show_citation(lang_texts)

# ------------------------
# Main
# ------------------------
def main():
    st.sidebar.title("Ayarlar / Settings")
    lang_choice = st.sidebar.selectbox("Dil / Language", ["T√ºrk√ße", "English"], index=0)
    lang_texts = languages[lang_choice]

    method_choice = st.sidebar.radio(lang_texts["method_choice"], [lang_texts["top_down"], lang_texts["bottom_up"]], index=0)

    if method_choice == lang_texts["top_down"]:
        mode = st.sidebar.radio("Giri≈ü Modu / Input Mode", ["Yapƒ±≈ütƒ±r / Paste", "Elle / Manual", "Validation / Doƒürulama"], index=0)
        if mode.startswith("Elle"):
            run_manual_mode(lang_texts)
        elif mode.startswith("Validation"):
            run_validation_mode(lang_texts)
        else:
            run_paste_mode(lang_texts)
    else:
        run_bottom_up_mode(lang_texts)

if __name__ == "__main__":
    main()
